using System;
using System.Collections.Generic;
using System.IO;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Globalization;
using System.Linq.Expressions;
using System.Xml;


namespace GUI_XML_Server
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private static String cleanLine(String input)
        {
            //Verify file name, return valid file name...
            String output = null;
            bool q = false;

            for (int i=0; i<input.Length; i++)
            {
                q = char.IsLetterOrDigit(input[i]);
                if (q == true || input[i] == '_')
                {
                    output = output + input[i];
                }
                else
                {
                    output = output + ".xml";
                    return output;
                }
            }
            if (output == null)
            {
                output = "default";
            }
            output = output + ".xml";
            return output;
        }

        public void createDocument(String input)
        {
            String fileName = cleanLine(input);
            
            XmlTextWriter writer = new XmlTextWriter(fileName, System.Text.Encoding.UTF8);

            String[] coord1 = readTextBoxes(1);
            writer.WriteStartDocument();
            writer.Formatting = Formatting.Indented;
            writer.Indentation = 2;
            writer.WriteStartElement("Pos_List");


            createRobotNode(coord1, "Pick_Pos", writer);

            writer.WriteEndElement();
            writer.WriteEndDocument();
            writer.Close();

            MessageBox.Show("Archivo {0} creado", fileName);
        }

        public void readDocument(String input)
        {
            String fileName = cleanLine(input);
            if (!File.Exists(fileName))
            {
                MessageBox.Show("El archivo no existe");
                return;
            }
            XmlDocument doc = new XmlDocument();
            doc.PreserveWhitespace = true;
            doc.Load(fileName);
            String documentString = doc.InnerXml;
            MessageBox.Show(documentString);

            List<String> coordinatesRead = new List<String>();


            XmlReaderSettings settings = new XmlReaderSettings();
            settings.DtdProcessing = DtdProcessing.Parse;
            XmlReader reader = XmlReader.Create(fileName, settings);
            reader.MoveToContent();
            while (reader.Read())
            {
                switch (reader.NodeType)
                {
                    case XmlNodeType.Text:
                        coordinatesRead.Add(reader.Value);
                        break;
                    default:
                        break;
                }
            }

            writeTextBoxes(1, coordinatesRead);
            foreach (String coord in coordinatesRead)
            {
                MessageBox.Show(coord);
            }


        }

        public String[] readTextBoxes(int boxToRead)
        {
            String[] returnString = { "0", "0", "0", "0", "0", "0" };
            switch (boxToRead)
            {
                case 1: //return group 1 
                    returnString[0] = posX_TxtB.Text;
                    returnString[1] = posY_TxtB.Text;
                    returnString[2] = posZ_TxtB.Text;
                    returnString[3] = rotX_TxtB.Text;
                    returnString[4] = rotY_TxtB.Text;
                    returnString[5] = rotZ_TxtB.Text;
                    break;
                case 2:

                    break;
                default:
                    break;
            }
            return returnString;
        }

        public void writeTextBoxes(int boxToWrite, List<String> readData)
        {
            switch (boxToWrite)
            {
                case 1:
                    offX_TxtB.Text = readData[0];
                    offY_TxtB.Text = readData[1];
                    offZ_TxtB.Text = readData[2];
                    offaX_TxtB.Text = readData[3];
                    offaY_TxtB.Text = readData[4];
                    offaZ_TxtB.Text = readData[5];
                    break;
                default:
                    break;
            }
        }

        private static void createRobotNode(String[] coord, String type, XmlTextWriter writer)
        {
            String[] nameArray = { "Pos_X", "Pos_Y", "Pos_Z", "Rot_X", "Rot_Y", "Rot_Z" };
            writer.WriteStartElement("Pose");
            writer.WriteAttributeString("Type", type);
            for(int i=0; i<coord.Length; i++)
            {
                writer.WriteElementString(nameArray[i], coord[i]);
            }
            writer.WriteEndElement();
        }

        private void groupBox1_Enter(object sender, EventArgs e)
        {

        }

        private void textBox1_TextChanged(object sender, EventArgs e)
        {

        }

        private void label13_Click(object sender, EventArgs e)
        {

        }

        private void label12_Click(object sender, EventArgs e)
        {

        }

        private void button13_Click(object sender, EventArgs e) //Read XML Document
        {
            String input = textBox12.Text;
            Control.ControlCollection textBoxes = groupBox1.Controls;

            MessageBox.Show("Leyendo archivo " + input);
            readDocument(input);
        }

        private void button14_Click(object sender, EventArgs e)
        {
           
        }

        private void textBox12_TextChanged(object sender, EventArgs e) 
        {

        }

        private void button13_Click_1(object sender, EventArgs e)
        {

        }

        private void button14_Click_1(object sender, EventArgs e) //Create XML Document
        {
            String input = textBox12.Text;
            MessageBox.Show("Creando archivo");
            createDocument(input);
            

        }
    }
}
